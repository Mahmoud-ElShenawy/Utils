import 'package:flutter/cupertino.dart';

class FallbackCupertinoLocalisationsDelegate
    extends LocalizationsDelegate<CupertinoLocalizations> {
  const FallbackCupertinoLocalisationsDelegate();

  @override
  bool isSupported(Locale locale) => true;

  @override
  Future<CupertinoLocalizations> load(Locale locale) =>
      DefaultCupertinoLocalizations.load(locale);

  @override
  bool shouldReload(FallbackCupertinoLocalisationsDelegate old) => false;
}

In main screen :-
  SpecificLocalizationDelegate _specificLocalizationDelegate;
  @override
  void initState() {
    super.initState();
    _specificLocalizationDelegate =
        new SpecificLocalizationDelegate(new Locale("ar"));
    getItems();
  }
  
    void getItems() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    setState(() {
      _light = prefs.getBool('theme') != null ? prefs.getBool('theme') : true;
    });
    if (prefs.getString("language") == null) {
      setState(() {
        _specificLocalizationDelegate =
            new SpecificLocalizationDelegate(new Locale("ar"));
        language = "ar";
      });
    } else {
      setState(() {
        _specificLocalizationDelegate = new SpecificLocalizationDelegate(
            new Locale(prefs.getString("language")));
        language = prefs.getString("language");
      });
    }
    if (prefs.getStringList("itemIDs") != null) {
      getSavedItems();
    }
  }
  
    onLocaleChange(Locale locale) {
    setState(() {
      _specificLocalizationDelegate = new SpecificLocalizationDelegate(locale);
    });
  }

In Material App Widget :- 
      localizationsDelegates: [
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        // location_picker.delegate,
        const FallbackCupertinoLocalisationsDelegate(),
        _specificLocalizationDelegate,
      ],
      supportedLocales: [Locale('en'), Locale('ar')],
      locale: _specificLocalizationDelegate.overriddenLocale,
